currentBuild.displayName = "DevOpsBootcamp-#"+currentBuild.number
pipeline{
    agent any
	environment{
		DOCKER_TAG = getDockerTag()
		MVN_HOME = mvnHome()
	}
	stages{
	    stage("Git Chekout"){
		    steps{
			    git url: 'https://github.com/AlexRak1/hello-world.git'
			}
		}
 		
		stage("Maven Build"){
		    steps{
				withMaven(maven: 'maven'){
					sh "mvn clean package"
					sh "mv webapp/target/*.war  webapp/target/myweb.war"
				}
			}
	}
/*
		stage("Compile-Package"){
			steps{
				//Get maven home path
				sh"echo ${MVN_HOME}"
				sh "MVN_HOME/bin/mvn package"
			}
		}
	
	
		stage("SonarQube analysis") {
			steps{
				def mvnHome = tool name: "maven", type: "maven"
				withSonarQubeEnv('sonarqube1') {
					sh "MVN_HOME/bin/mvn sonar:sonar"
				}
			}
		}
*/
		stage("SonarQube analysis") {
			steps{
				withSonarQubeEnv('sonarqube1') {
					withMaven(maven: 'maven'){
						sh "mvn sonar:sonar"
						//sh "mvn -e -X clean package sonar:sonar"
						//sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.1.0.1829:sonar'					 
					}
				} // submitted SonarQube taskId is automatically attached to the pipeline context
			}
		}
		
		stage("Build Docker Image"){
			steps{
				sh "docker build . -t irakevich/hello-world:${DOCKER_TAG} "
			}
		}
		stage("Docker Push"){
			steps{
				withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]){
					sh "docker login -u irakevich -p ${dockerHubPwd}"
					sh "docker push irakevich/hello-world:${DOCKER_TAG}"
				}
			}
		}
		stage("Deploy to Kubernetes"){
			steps{
				sh "chmod +x changeTag.sh"
				sh "./changeTag.sh ${DOCKER_TAG}"
				sshagent(['kops-machine']) {
					sh "scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@3.12.161.201:/home/ec2-user/"
					script{
						try{
							sh "ssh ec2-user@3.12.161.201 kubectl apply -f ."					
						}catch(error){
							sh "ssh ec2-user@3.12.161.201 kubectl create -f ."	
						}
					}
				}
			}
		}
 	
		stage("deploy-dev"){
			steps{
				sshagent(['tomcat-new']) {
				sh """
				    scp -o StrictHostKeyChecking=no webapp/target/myweb.war ec2-user@10.0.1.192:/opt/tomcat/webapps/
				    ssh ec2-user@10.0.1.192 /opt/tomcat/bin/shutdown.sh
					ssh ec2-user@10.0.1.192 /opt/tomcat/bin/startup.sh
				"""
		    }

			}
		}
 

	}
}
def getDockerTag(){
	def tag = sh script: 'git rev-parse HEAD', returnStdout: true
	return tag
}
def mvnHome(){
	def mvnHome = tool name: 'maven', type: 'maven'
	return mvnHome
}