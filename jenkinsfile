currentBuild.displayName = "DevOpsBootcamp-#"+currentBuild.number
pipeline{
    agent any
	tools{
		maven "3.6.0"
	}
  
	environment{
		DOCKER_TAG = getDockerTag()
		SCAN_HOME = scanHome()
	}
	stages{
	    stage("Git Chekout"){
		    steps{
			    git url: 'https://github.com/AlexRak1/hello-world.git'
			}
		}
		stage("Testing stage"){
			steps{
				withMaven(maven: 'maven'){
					sh "mvn test"
				}
				
			}
		}
 
		stage("Maven Build"){
		    steps{
				 
					sh "mvn clean package"
					sh "mv webapp/target/*.war  webapp/target/myweb.war"
				 
			}
		}
 /*
		stage("SonarQube analysis") {
			steps{
				withSonarQubeEnv('sonarqube1') {
				
						sh "mvn -version"
						sh"mvn clean package sonar:sonar"
						//sh "mvn clean package"
						 
						//sh "mvn sonar:sonar"
						//sh "mvn  -e -X  sonar:sonar"
						//sh "mvn -e -X clean package sonar:sonar"					 
					 
				} // submitted SonarQube taskId is automatically attached to the pipeline context
			}
		}
		
		stage("Quality Gates"){
			steps{
				timeout(time: 1, unit: "HOURS"){
					 waitForQualityGate abortPipeline: true
					}
				}
		}
		
	*/
		stage("Build Docker Image"){
			steps{
				sh "docker build . -t irakevich/hello-world:${DOCKER_TAG} "
			}
		}
		stage("Docker Push"){
			steps{
				withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]){
					sh "docker login -u irakevich -p ${dockerHubPwd}"
					sh "docker push irakevich/hello-world:${DOCKER_TAG}"
				}
			}
		}
		stage("Deploy to Kubernetes"){
			steps{
				sh "chmod +x changeTag.sh"
				sh "./changeTag.sh ${DOCKER_TAG}"
				sshagent(['kops-machine']) {
					sh "scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@3.14.141.2:/home/ec2-user/"
					script{
						try{
							sh "ssh ec2-user@3.14.141.2 kubectl apply -f ."					
						}catch(error){
							sh "ssh ec2-user@3.14.141.2 kubectl create -f ."	
						}
					}
				}
			}
		}
 	
		stage("deploy-dev"){
			steps{
				sshagent(['tomcat-new']) {
				sh """
				    scp -o StrictHostKeyChecking=no webapp/target/myweb.war ec2-user@10.0.1.192:/opt/tomcat/webapps/
				    ssh ec2-user@10.0.1.192 /opt/tomcat/bin/shutdown.sh
					ssh ec2-user@10.0.1.192 /opt/tomcat/bin/startup.sh
				"""
		    }

			}
		}
 

	}
}
def getDockerTag(){
	def tag = sh script: 'git rev-parse HEAD', returnStdout: true
	return tag
}
def scanHome(){
 //def scannerHome = tool name: 'Scanner1', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
 def scannerHome= '/opt/sonar_scanner'

 return scannerHome
}